		---> Download and install docker <---
docker --version -> to check docker version.
-> To run docker images in container. it also give logs
	docker run -p port:port image name:Release verison
->  To run docker images in container. It will run in isolate mode.
	docker run -d -p port:port image name:Release verison
-> Images is a static and we have to run it in containers.
-> Container is dynamic, once we gave command to run images then image runs in container.
-> To check all images :
	docker images
-> To check list of container :
	docker container ls
-> To check running container :
	docker container ls -a
-> To start or stop container use below :
	docker container start <Container Id or name>
	docker container stop <Container Id or name>
-> To check check container logs :
	docker container logs <container Id>
-> To remove container use below :
	docker container rm <container Id>
-> To remove all stoped container use below :
	docker container prune
-> To check container information that when created, port images, status, logs, port binding use  below :
	docker container inspect <container Id>
-> To check docker images history use below :
	docker image history <Image Id>
	docker image history <repository name> : release version
-> To remove image, first stop and remove container then remove image.
	docker image remove <container Id>
		
		---> How does docker work <---
-> When you install docker in desktop. It install two things 
	1- Docker client
	2- Docker Daemon
-> Now docker daemon has 3 parts.
	OR you can say that docker daemon manages below three things :
	1- Containers
	2- Local Images
	3- Image registry ex : nginx, mysql, eureka, your appl.
-> Daemon is also responsible to create Images based in the input what we gave and pushed it into image registry.

		---> How to create docker images <---
-> Create deployable units :
	For this Just opem Parent POM and check <Packaging>Jar</Packaging>. It would be anything like Jar or war.
	First create a Jar.
-> To create Jar right click on Project Run as -> Maven build -> Goal : package
	Build will run and at the end it will create a jar file copy url and check location for jar.
-> Now open Terminal or GitBash go to Jar folder and type belwo command to run jar :
	Java -jar <Jar name>
	Now copy local url and hit on browser. you will see response.
	
	---> Manually creating a new docker image
	1- Open GitBash type below command
		docker run -dit openjdk:8-jdk-alpine  --> when you want to create base image then use alpine.
	Now container has been created. 
	2- Now you have to copy jar in to this container. For this use below command :
		docker container cp target/jar name <Container Id or name>:/temp		cp - copy.
	Now jar has been copied in container. How would you know that it has been copied?
	3- Now to verify use below command :
		docker container exec <container Id or name> ls /temp
	4- Now by using above container we will create image. use below command :
		docker container commit <container Id or name> <Give image name here>
	5- What do I want to do with this Image ? I want to run Jar into this image. use below command :
		docker container commit --change='CMD ["Java","-Jar", "/temp/jar name"]' <container name with version 2> <your image name give as above>
	6- Now images has been created, you can check by using below command :
		docker images
	7- Now I want to launch this image then use below command :
		docker run -d -p 5000:5000 <image name:tag> or <container Id>
	8- Container successfully created. You can check logs :
		docker logs <container Id>
	9- You can share this image to anyone and they can run easily in their machine if they have docker.

	---> Automate creating image process
-> Above process is very tidius bc if you have to create 1000 then what?
-> That's why docker file comes into picture.
	Docker file : this is a file where we are defining that how images will create.
-> There two thing which we need to add in our project.
	1- Add docker plugin in Parent POM.
	2- Add Docker file inside target folder.
-> Now open Docker file and add below information :
	FROM openjdk:8-jdk-alpine
	VOLUME /temp
	EXPOSE 5000
	ADD target/*.jar app.jar
	ENTRYPOINT ["sh", "-c", "java -jar /app.jar"]
-> To build image follow below steps :
-> To Build image right click on Project Run as -> Maven build -> Goal : package
	Build will run and at the end it will see it will create image and tag file.
-> Now open Terminal or GitBash and simply run this image.
	docker run -d -p 5000:5000 <image name:tag> or <container Id>
-> You can also check container logs.
-> The last step is to push your images in docker repository or where you want.
-> docker login --enter user name and password of dockerhub.
-> docker push <give> image name here.
