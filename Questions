Hi,
Find below questions that asked in interview :

Programming questions are :
1: find median of two sorted arrays.
Answer : Solutions added in below commit :
https://github.com/Sufiyan33/Data-Structure/blob/main/DataStructure/src/arrays/ProgramToFindMedianOFTwoArrays.java
Also added my solution in leetCode :
https://leetcode.com/problems/median-of-two-sorted-arrays/solutions/3781532/java-easy-solution-100-work/

2: water trailing problem.
3: find 3rd smallest number using Java 8
Answer : Please check below code :
  List<Integer> lis = Arrays.asList(12, 34, 53, 1, 3, 5, 6, 51, 64);
		lis.stream().sorted(Comparator.naturalOrder()).skip(2).findFirst().ifPresent(System.out::println);

		int[] arr = { 2, 2, 4, 12, 32, 21, 41 };
		Arrays.stream(arr).boxed().distinct().sorted(Comparator.naturalOrder()).skip(2).findFirst()
				.ifPresent(System.out::println);
-> you can also check below for various ways to solve question :
https://github.com/Sufiyan33/Java-8-Practice-Program/blob/master/Java8Practice/src/interview/SecondSmallestNumber.java#L27

Theoretically question:
1: how to achieve concurrency in your application.
2: what are the design patterns of Microservices.
Answer : 
------------------------------------------
Micro-services design pattern :
------------------------------------------
Listing here, some popular micro-services design pattern :
1 : Service Registry pattern
2 : circuit breaker pattern
3 : API Gateway pattern
4 : Event driven architecture
5 : Database design pattern (1- database per service 2- shared database)
6 : CQRS
7 : Saga Pattern (1- Orchestrater, 2- Choreography)
8 : Two phase commit
9 : Externalized configuration
10 : Backend for frontend
11 : Bulkhead pattern
12 : Composite etc

3: how to implement api gateway.
------------------------------------------
Implement api-gateway :
------------------------------------------
-> API- Gateway is main or single entry point for your application.
-> All the request coming from the user will not go directly to specific service instead of this all request will hit api gateway and it's api
	Gateway responsibility to do route to specific service and get back the result.
-> Api - gateway is also reposible to handle below things :
	- cache
	- authentication & authorization
	- Routing
	- Logging
	- Monitoring
	- Request handling and response mapping etc.

-> To implement ApiGateway :
1 : Create a service name as api Gateway.
2 : Add Eureka discovery cleint  dependency.	
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
3 : Add gateway dependency.
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
4 : Add @EnableEurekaClient in main class where you have written main method. 
5 : Add below prop for gateway in application.yml or application.properties :
	cloud:
		gateway:
		   routes:
			- id: Your-applcation-name
			  uri: lb:/Your-applcation-name
			  predicates: 
			   - Path=/endPointName/**
			- id: Your-applcation-name
			  uri: lb:/Your-applcation-name
			  predicates: 
			   - Path=/endPointName/**

6 : Now you need to register api-gateway to service registery hence add below properties :
	eureka:
		client:
			registry-with-eureka: true
			fetch-registry: true
			service-url:
				default-zone: http://localhost:8761/eureka/
		instance:
			hostname: localhost
			
7 : If you want to you can add hystrix or Resilience4j dependencies.

4: what is the service mesh.
5 : asked many questions from spring boot annotations.
6: what is deadlock conditions and how to avoid.
7: what is memory leaks in java.
8: serialisation etc
